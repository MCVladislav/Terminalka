#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <stdbool.h>
#define epsilon 1e-6
void p(float**mus, int m, int n){
    for(int i=0; i<m; i++){
        for(int j=0; j<n; j++){
            if(fabs(mus[i][j])<epsilon) mus[i][j]=0;
            printf("%.4f ", mus[i][j]);
        }
        printf("\n");
    }
}

int main()
{
    int m=0, n=0;
    float per=0;
    float c=0;
    scanf("%d%d", &m, &n);
    float**mus=(float**)malloc(m*sizeof(float*));
    for(int i=0; i<m; i++){
        mus[i]=(float*)malloc(n*sizeof(float));
    }
    for(int i=0; i<m; i++){
        for(int j=0; j<n; j++){
            scanf("%f", &mus[i][j]);
        }
    }
    for(int i=0, v=0; i<m-1 && v<n; i++, v++){
        if(fabs(mus[i][v])>epsilon){
            for(int l=i+1; l<m; l++){
                per=-mus[l][v]/mus[i][v];
                for(int j=v; j<n; j++){
                    mus[l][j]+=per*mus[i][j];
                }
            }
        }
        else{
            for(int k=v; k<m; k++){
                if(fabs(mus[k][v])>epsilon){
                    for(int p=0; p<n; p++){
                        c=mus[i][p];
                        mus[i][p]=mus[k][p];
                        mus[k][p]=c;
                    }
                    i--;
                    break;
                }
            }
            i--;
        }
    }
    
    int kol=m;
    int q=0;
    float z=0;
    for(int i=0; i<m; i++){
        z=0;
        for(int j=0; j<n; j++){
            z+=mus[i][j]*mus[i][j];
        }
        if(fabs(z)<epsilon) kol--;
    }
    q=n-kol;
    for(int i=kol-1; i>0; i--){
        for(int j=0; j<n; j++){
            if(fabs(mus[i][j])>epsilon){
                for(int k=i-1; k>=0; k--){
                    per=-mus[k][j]/mus[i][j];
                    for(int y=j; y<n; y++){
                        mus[k][y]+=per*mus[i][y];
                    }
                }
                break;
            }
        }
    }
    float**new=(float**)malloc(n*sizeof(float*));
    for(int i=0; i<n; i++){
        new[i]=(float*)malloc(q*sizeof(float));
    }
    for(int i=0; i<m; i++){
        for(int j=0; j<n; j++){
            new[i][j]=0;
        }
    }
    int*zav=(int*)malloc(n*sizeof(int));
    for(int i=0; i<kol; i++){
        for(int j=0; j<n; j++){
            if(fabs(mus[i][j])>epsilon){
                zav[i]=j;
                break;
            }
        }
    }
    int pravda=0;
    int ch=kol;
    for(int i=0; i<q; i++){
        for(int j=0; j<n; j++){
            pravda=true;
            for(int b=0; b<n; b++){
                if(j==zav[b]){
                    pravda=false;
                    break;
                }
            }
            if(pravda){
                new[j][i]=1;
                zav[ch]=j;
                ch++;
                break;
            }
        }
    }
    for(int r=0; r<q; r++){
        for(int i=0; i<kol; i++){
            for(int u=r+1; u<n; u++){
                new[zav[i]][r]-=new[u][r]*mus[i][u]; 
            }
            new[zav[i]][r]=new[zav[i]][r]/mus[i][zav[i]];
        }
    }
    p(new, n, q);
    return 0;
}
